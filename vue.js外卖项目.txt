1.mvvm框架

View ----> ViewModel ----> Model
视图 <---- 观察者   <----- 数据
	
数据的双向绑定都会通知ViewModel

2.vue的优势
体积小，轻量级，适合移动端；易上手angular是java工程师写的很多技术都是后端的比如依赖注入的，react自己有套语法；
借鉴了angular的指令和react的组件化

3.核心
数据驱动和组件化

4.vue-cli是vue的脚手架工具
目录机构，本地调试，代码部署，热加载，单元测试

5.vue项目快速搭建 vue-cli
首先全局安装 vue-cli npm i vue-cli -g
其次输入指令快速搭建 vue init webpack sell

组件化
在component下建立多个组件
哪里需要就在哪里导入，并且注册组件即可使用
import tab from 'components/tab/tab'
export default {
  components:{
    tab
  }
}
<template>
  <div id="app">
    <tab></tab>
  </div>
</template>


stylus写样式 ，可以使用less ，scss
先要下载 cnpm i stylus-loader stylus --save
并且标签写明 
<style lang="stylus" scoped></style>


路由跳转和跳转内容显示区域

路由跳转
<router-link to="/goods">商品</router-link>
跳转内容显示区域
<router-view>
	内容显示在这里
</router-view>

特别注意在router-link配置的跳转需要去配置下路由规则
import Goods from 'components/goods/goods'
export default new Router({
  routes: [
    {
      path: '/goods',
      component: Goods
    }
  ]
})

设置不同跳转的路由，跳转不同的组件，这里也是组件化的







vue-router,父子组件的传值，本地mock数据获取